components:
  schemas:
    Align:
      enum:
        - left
        - center
        - right
      title: Align
      type: string
    Client:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/Client.json
          format: uri
          readOnly: true
          type: string
        id:
          format: int32
          type: integer
        ip:
          type: string
        lastSeen:
          format: date-time
          type: string
      required:
        - id
        - ip
        - lastSeen
      type: object
    Contest:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/Contest.json
          format: uri
          readOnly: true
          type: string
        endTime:
          format: date-time
          type: string
        externalId:
          type: string
        id:
          format: int32
          type: integer
        name:
          type: string
        startTime:
          format: date-time
          type: string
      required:
        - id
        - externalId
        - name
        - startTime
        - endTime
      type: object
    ErrorDetail:
      additionalProperties: false
      properties:
        location:
          description: Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
          type: string
        message:
          description: Error message text
          type: string
        value:
          description: The value at the given location
      type: object
    ErrorModel:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/ErrorModel.json
          format: uri
          readOnly: true
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          examples:
            - Property foo is required but is missing.
          type: string
        errors:
          description: Optional list of individual error details
          items:
            $ref: "#/components/schemas/ErrorDetail"
          type: array
        instance:
          description: A URI reference that identifies the specific occurrence of the problem.
          examples:
            - https://example.com/error-log/abc123
          format: uri
          type: string
        status:
          description: HTTP status code
          examples:
            - 400
          format: int64
          type: integer
        title:
          description: A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
          examples:
            - Bad Request
          type: string
        type:
          default: about:blank
          description: A URI reference to human-readable documentation for the error.
          examples:
            - https://example.com/errors/example
          format: uri
          type: string
      type: object
    InitMessage:
      additionalProperties: false
      type: object
    LabelSpec:
      additionalProperties: false
      properties:
        align:
          $ref: "#/components/schemas/Align"
        color:
          type: string
        display:
          type: boolean
        size:
          format: int32
          type: integer
        weight:
          format: int32
          type: integer
        x:
          format: int32
          type: integer
        "y":
          format: int32
          type: integer
      required:
        - x
        - "y"
        - size
        - color
        - weight
        - align
        - display
      type: object
    LoginRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/LoginRequestBody.json
          format: uri
          readOnly: true
          type: string
        password:
          description: Password
          type: string
        username:
          description: Username
          type: string
      required:
        - username
        - password
      type: object
    SSEOperation:
      enum:
        - create
        - update
        - delete
      title: SSEOperation
      type: string
    SSEUpdateClient:
      additionalProperties: false
      properties:
        Data:
          $ref: "#/components/schemas/Client"
        Id:
          format: int64
          type: integer
        Operation:
          $ref: "#/components/schemas/SSEOperation"
      required:
        - Operation
        - Id
        - Data
      type: object
    SSEUpdateTeam:
      additionalProperties: false
      properties:
        Data:
          $ref: "#/components/schemas/Team"
        Id:
          format: int64
          type: integer
        Operation:
          $ref: "#/components/schemas/SSEOperation"
      required:
        - Operation
        - Id
        - Data
      type: object
    SSEUpdateUser:
      additionalProperties: false
      properties:
        Data:
          $ref: "#/components/schemas/User"
        Id:
          format: int64
          type: integer
        Operation:
          $ref: "#/components/schemas/SSEOperation"
      required:
        - Operation
        - Id
        - Data
      type: object
    SetClientRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/SetClientRequestBody.json
          format: uri
          readOnly: true
          type: string
        clientId:
          format: int32
          type: integer
      type: object
    SetTeamRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/SetTeamRequestBody.json
          format: uri
          readOnly: true
          type: string
        teamId:
          type: string
      type: object
    Team:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/Team.json
          format: uri
          readOnly: true
          type: string
        id:
          type: string
        ip:
          type: string
        name:
          type: string
      required:
        - id
        - name
      type: object
    User:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/User.json
          format: uri
          readOnly: true
          type: string
        email:
          type: string
        id:
          format: int64
          type: integer
        role:
          type: string
        username:
          type: string
      required:
        - id
        - username
        - email
        - role
      type: object
    WallpaperLayout:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          examples:
            - https://example.com/schemas/WallpaperLayout.json
          format: uri
          readOnly: true
          type: string
        fontStack:
          type: string
        h:
          format: int32
          type: integer
        ip:
          $ref: "#/components/schemas/LabelSpec"
        teamname:
          $ref: "#/components/schemas/LabelSpec"
        w:
          format: int32
          type: integer
      required:
        - w
        - h
        - fontStack
        - teamname
        - ip
      type: object
info:
  title: Fogistration
  version: 2.0.0
openapi: 3.1.0
paths:
  /api/auth/dev/login:
    post:
      description: Login into an admin account without credentials in development
      operationId: devLogin
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Dev login
      tags:
        - auth
  /api/auth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Login
      tags:
        - auth
  /api/auth/logout:
    post:
      operationId: logout
      responses:
        "204":
          description: No Content
          headers:
            Set-Cookie:
              schema:
                type: string
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Logout
      tags:
        - auth
  /api/clients/:
    get:
      operationId: listClients
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Client"
                type: array
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - clients
  /api/clients/{id}:
    get:
      operationId: getClient
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          schema:
            description: Client ID
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - clients
  /api/clients/{id}/team:
    post:
      operationId: setClientTeam
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          schema:
            description: Client ID
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetTeamRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Set client team
      tags:
        - clients
  /api/contests/:
    get:
      operationId: listContests
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Contest"
                type: array
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - contests
  /api/contests/active:
    get:
      operationId: getActiveContest
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - contests
  /api/sse:
    get:
      operationId: sse
      responses:
        "200":
          content:
            text/event-stream:
              schema:
                description: Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.
                items:
                  oneOf:
                    - properties:
                        data:
                          $ref: "#/components/schemas/SSEUpdateClient"
                        event:
                          const: getClient
                          description: The event name.
                          type: string
                        id:
                          description: The event ID.
                          type: integer
                        retry:
                          description: The retry time in milliseconds.
                          type: integer
                      required:
                        - data
                        - event
                      title: Event getClient
                      type: object
                    - properties:
                        data:
                          $ref: "#/components/schemas/SSEUpdateUser"
                        event:
                          const: getCurrentUser
                          description: The event name.
                          type: string
                        id:
                          description: The event ID.
                          type: integer
                        retry:
                          description: The retry time in milliseconds.
                          type: integer
                      required:
                        - data
                        - event
                      title: Event getCurrentUser
                      type: object
                    - properties:
                        data:
                          $ref: "#/components/schemas/SSEUpdateTeam"
                        event:
                          const: getTeam
                          description: The event name.
                          type: string
                        id:
                          description: The event ID.
                          type: integer
                        retry:
                          description: The retry time in milliseconds.
                          type: integer
                      required:
                        - data
                        - event
                      title: Event getTeam
                      type: object
                    - properties:
                        data:
                          $ref: "#/components/schemas/InitMessage"
                        event:
                          const: initMessage
                          description: The event name.
                          type: string
                        id:
                          description: The event ID.
                          type: integer
                        retry:
                          description: The retry time in milliseconds.
                          type: integer
                      required:
                        - data
                        - event
                      title: Event initMessage
                      type: object
                title: Server Sent Events
                type: array
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Server-sent events
  /api/teams/:
    get:
      operationId: listTeams
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Team"
                type: array
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - teams
  /api/teams/{id}:
    get:
      operationId: getTeam
      parameters:
        - description: Team external ID
          in: path
          name: id
          required: true
          schema:
            description: Team external ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      tags:
        - teams
  /api/teams/{id}/client:
    post:
      operationId: setTeamClient
      parameters:
        - description: Team external ID
          in: path
          name: id
          required: true
          schema:
            description: Team external ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetClientRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Set team client
      tags:
        - teams
  /api/users/me:
    get:
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Get Current user
      tags:
        - users
  /api/wallpapers/{id}/file:
    delete:
      description: If the file does not exist, returns succesfully
      operationId: deleteWallpaperFile
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
      responses:
        "204":
          description: No Content
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Delete wallpaper file
      tags:
        - wallpapers
    get:
      operationId: getWallpaperFile
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
      responses:
        "200":
          content:
            image/png:
              schema:
                contentMediaType: application/octet-stream
                format: binary
                type: string
          description: Image response
          headers:
            Content-Type:
              schema:
                type: string
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Get wallpaper file by id
      tags:
        - wallpapers
    put:
      operationId: putWallpaperFile
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
        - in: header
          name: Content-Type
          schema:
            type: string
      requestBody:
        content:
          image/png:
            schema:
              contentMediaType: application/octet-stream
              format: binary
              type: string
        required: true
      responses:
        "200":
          content:
            image/png:
              schema:
                contentMediaType: application/octet-stream
                format: binary
                type: string
          description: Image response
          headers:
            Content-Type:
              schema:
                type: string
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Create or replace wallpaper file
      tags:
        - wallpapers
  /api/wallpapers/{id}/layout:
    delete:
      operationId: deleteWallpaperLayout
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
      responses:
        "204":
          description: No Content
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Delete wallpaper layout
      tags:
        - wallpapers
    get:
      operationId: getWallpaperLayout
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WallpaperLayout"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Get wallpaper layout
      tags:
        - wallpapers
    put:
      operationId: putWallpaperLayout
      parameters:
        - description: Wallpaper id
          in: path
          name: id
          required: true
          schema:
            description: Wallpaper id
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WallpaperLayout"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WallpaperLayout"
          description: OK
        default:
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Error
      summary: Creates or replaces wallpaper with given layout
      tags:
        - wallpapers
