// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clients.sql

package database

import (
	"context"
)

const getAllClients = `-- name: GetAllClients :many
SELECT id, ip, last_seen, created_at, pending_sync FROM clients
`

func (q *Queries) GetAllClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.Query(ctx, getAllClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Ip,
			&i.LastSeen,
			&i.CreatedAt,
			&i.PendingSync,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientById = `-- name: GetClientById :one
SELECT id, ip, last_seen, created_at, pending_sync FROM clients
WHERE id = $1
`

func (q *Queries) GetClientById(ctx context.Context, id int32) (Client, error) {
	row := q.db.QueryRow(ctx, getClientById, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.LastSeen,
		&i.CreatedAt,
		&i.PendingSync,
	)
	return i, err
}

const setPendingSync = `-- name: SetPendingSync :exec
UPDATE clients
SET pending_sync = $2
WHERE id = $1
`

type SetPendingSyncParams struct {
	ID          int32 `json:"id"`
	PendingSync bool  `json:"pending_sync"`
}

func (q *Queries) SetPendingSync(ctx context.Context, arg SetPendingSyncParams) error {
	_, err := q.db.Exec(ctx, setPendingSync, arg.ID, arg.PendingSync)
	return err
}

const updateClientLastSeen = `-- name: UpdateClientLastSeen :exec
UPDATE clients
SET last_seen = NOW()
WHERE ip = $1
`

func (q *Queries) UpdateClientLastSeen(ctx context.Context, ip string) error {
	_, err := q.db.Exec(ctx, updateClientLastSeen, ip)
	return err
}

const upsertClient = `-- name: UpsertClient :one
INSERT INTO clients (
    ip
) VALUES (
    $1
)
ON CONFLICT (ip)
DO UPDATE SET
    last_seen = NOW()
RETURNING id, ip, last_seen, created_at, pending_sync
`

func (q *Queries) UpsertClient(ctx context.Context, ip string) (Client, error) {
	row := q.db.QueryRow(ctx, upsertClient, ip)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.LastSeen,
		&i.CreatedAt,
		&i.PendingSync,
	)
	return i, err
}
