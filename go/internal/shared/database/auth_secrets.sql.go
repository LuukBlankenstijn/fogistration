// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth_secrets.sql

package database

import (
	"context"
)

const createAuthSecret = `-- name: CreateAuthSecret :one
INSERT INTO auth_secrets (user_id, password_hash, salt)
VALUES ($1, $2, $3)
RETURNING user_id, password_hash, salt, created_at, updated_at
`

type CreateAuthSecretParams struct {
	UserID       int64  `json:"user_id"`
	PasswordHash string `json:"password_hash"`
	Salt         string `json:"salt"`
}

func (q *Queries) CreateAuthSecret(ctx context.Context, arg CreateAuthSecretParams) (AuthSecret, error) {
	row := q.db.QueryRow(ctx, createAuthSecret, arg.UserID, arg.PasswordHash, arg.Salt)
	var i AuthSecret
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthSecret = `-- name: DeleteAuthSecret :exec
DELETE FROM auth_secrets
WHERE user_id = $1
`

func (q *Queries) DeleteAuthSecret(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteAuthSecret, userID)
	return err
}

const getAuthSecret = `-- name: GetAuthSecret :one
SELECT user_id, password_hash, salt, created_at, updated_at
FROM auth_secrets
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetAuthSecret(ctx context.Context, userID int64) (AuthSecret, error) {
	row := q.db.QueryRow(ctx, getAuthSecret, userID)
	var i AuthSecret
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthSecret = `-- name: UpdateAuthSecret :one
UPDATE auth_secrets
SET
  password_hash = $2,
  salt          = $3,
  updated_at    = now()
WHERE user_id = $1
RETURNING user_id, password_hash, salt, created_at, updated_at
`

type UpdateAuthSecretParams struct {
	UserID       int64  `json:"user_id"`
	PasswordHash string `json:"password_hash"`
	Salt         string `json:"salt"`
}

func (q *Queries) UpdateAuthSecret(ctx context.Context, arg UpdateAuthSecretParams) (AuthSecret, error) {
	row := q.db.QueryRow(ctx, updateAuthSecret, arg.UserID, arg.PasswordHash, arg.Salt)
	var i AuthSecret
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertAuthSecret = `-- name: UpsertAuthSecret :one
INSERT INTO auth_secrets (user_id, password_hash, salt)
VALUES ($1, $2, $3)
ON CONFLICT (user_id) DO UPDATE
SET
  password_hash = EXCLUDED.password_hash,
  salt          = EXCLUDED.salt,
  updated_at    = now()
RETURNING user_id, password_hash, salt, created_at, updated_at
`

type UpsertAuthSecretParams struct {
	UserID       int64  `json:"user_id"`
	PasswordHash string `json:"password_hash"`
	Salt         string `json:"salt"`
}

func (q *Queries) UpsertAuthSecret(ctx context.Context, arg UpsertAuthSecretParams) (AuthSecret, error) {
	row := q.db.QueryRow(ctx, upsertAuthSecret, arg.UserID, arg.PasswordHash, arg.Salt)
	var i AuthSecret
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
