// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commands.sql

package database

import (
	"context"
)

const dequeueCommand = `-- name: DequeueCommand :one
DELETE FROM message_queue 
WHERE id = (
    SELECT id FROM message_queue 
    ORDER BY created_at ASC 
    FOR UPDATE SKIP LOCKED 
    LIMIT 1
)
RETURNING id, command_type, payload, created_at
`

func (q *Queries) DequeueCommand(ctx context.Context) (MessageQueue, error) {
	row := q.db.QueryRow(ctx, dequeueCommand)
	var i MessageQueue
	err := row.Scan(
		&i.ID,
		&i.CommandType,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const enqueueCommand = `-- name: EnqueueCommand :exec
INSERT INTO message_queue (command_type, payload)
VALUES ($1, $2)
`

type EnqueueCommandParams struct {
	CommandType string `json:"command_type"`
	Payload     []byte `json:"payload"`
}

func (q *Queries) EnqueueCommand(ctx context.Context, arg EnqueueCommandParams) error {
	_, err := q.db.Exec(ctx, enqueueCommand, arg.CommandType, arg.Payload)
	return err
}
