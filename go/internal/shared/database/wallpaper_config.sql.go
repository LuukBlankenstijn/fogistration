// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallpaper_config.sql

package database

import (
	"context"

	"github.com/LuukBlankenstijn/fogistration/internal/shared/database/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteWallpaperConfigByContest = `-- name: DeleteWallpaperConfigByContest :exec
DELETE FROM wallpaper_configs WHERE contest_id = $1
`

func (q *Queries) DeleteWallpaperConfigByContest(ctx context.Context, contestID string) error {
	_, err := q.db.Exec(ctx, deleteWallpaperConfigByContest, contestID)
	return err
}

const getWallpaperConfigByContest = `-- name: GetWallpaperConfigByContest :one
SELECT contest_id, filename, config, created_at, updated_at FROM wallpaper_configs
WHERE contest_id = $1
`

func (q *Queries) GetWallpaperConfigByContest(ctx context.Context, contestID string) (WallpaperConfig, error) {
	row := q.db.QueryRow(ctx, getWallpaperConfigByContest, contestID)
	var i WallpaperConfig
	err := row.Scan(
		&i.ContestID,
		&i.Filename,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertWallpaperConfig = `-- name: UpsertWallpaperConfig :one
INSERT INTO wallpaper_configs (contest_id, config)
VALUES ($1, $2)
ON CONFLICT (contest_id) DO UPDATE
SET config = EXCLUDED.config
RETURNING contest_id, filename, config, created_at, updated_at
`

type UpsertWallpaperConfigParams struct {
	ContestID string                      `json:"contest_id"`
	Config    *models.WallpaperConfigJSON `json:"config"`
}

func (q *Queries) UpsertWallpaperConfig(ctx context.Context, arg UpsertWallpaperConfigParams) (WallpaperConfig, error) {
	row := q.db.QueryRow(ctx, upsertWallpaperConfig, arg.ContestID, arg.Config)
	var i WallpaperConfig
	err := row.Scan(
		&i.ContestID,
		&i.Filename,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertWallpaperFile = `-- name: UpsertWallpaperFile :one
INSERT INTO wallpaper_configs (contest_id, filename)
VALUES ($1, $2)
ON CONFLICT (contest_id) DO UPDATE
SET filename = EXCLUDED.filename
RETURNING contest_id, filename, config, created_at, updated_at
`

type UpsertWallpaperFileParams struct {
	ContestID string      `json:"contest_id"`
	Filename  pgtype.Text `json:"filename"`
}

func (q *Queries) UpsertWallpaperFile(ctx context.Context, arg UpsertWallpaperFileParams) (WallpaperConfig, error) {
	row := q.db.QueryRow(ctx, upsertWallpaperFile, arg.ContestID, arg.Filename)
	var i WallpaperConfig
	err := row.Scan(
		&i.ContestID,
		&i.Filename,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
