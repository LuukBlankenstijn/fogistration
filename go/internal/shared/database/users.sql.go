// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLocalUser = `-- name: CreateLocalUser :one
INSERT INTO users (username, email, role)
VALUES ($1, $2, $3)
RETURNING id, username, email, role, external_id, created_at, updated_at, last_login_at
`

type CreateLocalUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Role     string `json:"role"`
}

func (q *Queries) CreateLocalUser(ctx context.Context, arg CreateLocalUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createLocalUser, arg.Username, arg.Email, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, role, external_id, created_at, updated_at, last_login_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const getUserByUsernameCI = `-- name: GetUserByUsernameCI :one
SELECT id, username, email, role, external_id, created_at, updated_at, last_login_at FROM users
WHERE lower(username) = lower($1)
LIMIT 1
`

func (q *Queries) GetUserByUsernameCI(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameCI, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, role, external_id, created_at, updated_at, last_login_at FROM users
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.ExternalID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const touchLastLogin = `-- name: TouchLastLogin :one
UPDATE users
SET last_login_at = now()
WHERE id = $1
RETURNING id, username, email, role, external_id, created_at, updated_at, last_login_at
`

func (q *Queries) TouchLastLogin(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, touchLastLogin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
  username = COALESCE($1, username),
  email    = COALESCE($2, email),
  role     = COALESCE($3, role)
WHERE id = $4
RETURNING id, username, email, role, external_id, created_at, updated_at, last_login_at
`

type UpdateUserProfileParams struct {
	Username pgtype.Text `json:"username"`
	Email    pgtype.Text `json:"email"`
	Role     pgtype.Text `json:"role"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}
