// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: wallpapers.sql

package database

import (
	"context"

	"github.com/LuukBlankenstijn/fogistration/internal/shared/database/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteWallpaperById = `-- name: DeleteWallpaperById :exec
DELETE FROM wallpapers WHERE id = $1
`

func (q *Queries) DeleteWallpaperById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWallpaperById, id)
	return err
}

const getWallpaperById = `-- name: GetWallpaperById :one
SELECT id, filename, layout, created_at, updated_at FROM wallpapers
WHERE id = $1
`

func (q *Queries) GetWallpaperById(ctx context.Context, id int32) (Wallpaper, error) {
	row := q.db.QueryRow(ctx, getWallpaperById, id)
	var i Wallpaper
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Layout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertWallpaperFilename = `-- name: UpsertWallpaperFilename :one
INSERT INTO wallpapers (id, filename)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
SET filename = EXCLUDED.filename
RETURNING id, filename, layout, created_at, updated_at
`

type UpsertWallpaperFilenameParams struct {
	ID       int32       `json:"id"`
	Filename pgtype.Text `json:"filename"`
}

func (q *Queries) UpsertWallpaperFilename(ctx context.Context, arg UpsertWallpaperFilenameParams) (Wallpaper, error) {
	row := q.db.QueryRow(ctx, upsertWallpaperFilename, arg.ID, arg.Filename)
	var i Wallpaper
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Layout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertWallpaperLayout = `-- name: UpsertWallpaperLayout :one
INSERT INTO wallpapers (id, layout)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
SET layout = EXCLUDED.layout
RETURNING id, filename, layout, created_at, updated_at
`

type UpsertWallpaperLayoutParams struct {
	ID     int32                   `json:"id"`
	Layout *models.WallpaperLayout `json:"layout"`
}

func (q *Queries) UpsertWallpaperLayout(ctx context.Context, arg UpsertWallpaperLayoutParams) (Wallpaper, error) {
	row := q.db.QueryRow(ctx, upsertWallpaperLayout, arg.ID, arg.Layout)
	var i Wallpaper
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Layout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
