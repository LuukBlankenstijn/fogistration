// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Contest defines model for Contest.
type Contest struct {
	AllowSubmit              *bool           `json:"allow_submit,omitempty"`
	Banner                   *[]ImageFile    `json:"banner,omitempty"`
	Cid                      *int            `json:"cid,omitempty"`
	Duration                 *string         `json:"duration,omitempty"`
	EndTime                  *time.Time      `json:"end_time,omitempty"`
	FormalName               *string         `json:"formal_name,omitempty"`
	Id                       *string         `json:"id,omitempty"`
	Name                     *string         `json:"name,omitempty"`
	PenaltyTime              *int            `json:"penalty_time,omitempty"`
	Problemset               *[]FileWithName `json:"problemset,omitempty"`
	RuntimeAsScoreTiebreaker *bool           `json:"runtime_as_score_tiebreaker,omitempty"`
	ScoreboardFreezeDuration *string         `json:"scoreboard_freeze_duration"`
	ScoreboardThawTime       *time.Time      `json:"scoreboard_thaw_time,omitempty"`
	ScoreboardType           *string         `json:"scoreboard_type,omitempty"`
	Shortname                *string         `json:"shortname,omitempty"`
	StartTime                *time.Time      `json:"start_time,omitempty"`
	WarningMessage           *string         `json:"warning_message"`
}

// FileWithName defines model for FileWithName.
type FileWithName struct {
	Filename *string `json:"filename,omitempty"`
	Href     *string `json:"href,omitempty"`
	Mime     *string `json:"mime,omitempty"`
}

// ImageFile defines model for ImageFile.
type ImageFile struct {
	Filename *string `json:"filename,omitempty"`
	Height   *int    `json:"height,omitempty"`
	Href     *string `json:"href,omitempty"`
	Mime     *string `json:"mime,omitempty"`
	Width    *int    `json:"width,omitempty"`
}

// Team defines model for Team.
type Team struct {
	Affiliation       *string       `json:"affiliation"`
	DisplayName       *string       `json:"display_name"`
	GroupIds          *[]string     `json:"group_ids,omitempty"`
	Hidden            *bool         `json:"hidden,omitempty"`
	IcpcId            *string       `json:"icpc_id"`
	Id                *string       `json:"id,omitempty"`
	Label             *string       `json:"label"`
	Location          *TeamLocation `json:"location,omitempty"`
	Name              *string       `json:"name,omitempty"`
	Nationality       *string       `json:"nationality"`
	OrganizationId    *string       `json:"organization_id"`
	Photo             *[]ImageFile  `json:"photo,omitempty"`
	PublicDescription *string       `json:"public_description"`
	Teamid            *int          `json:"teamid,omitempty"`
}

// TeamLocation defines model for TeamLocation.
type TeamLocation struct {
	Description *string `json:"description,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Email    *openapi_types.Email `json:"email"`
	Enabled  *bool                `json:"enabled"`
	Id       *string              `json:"id"`
	Ip       *string              `json:"ip"`
	Name     *string              `json:"name"`
	Password *string              `json:"password"`
	Roles    *[]string            `json:"roles"`
	TeamId   *string              `json:"team_id"`
	Username *string              `json:"username"`
}

// User defines model for User.
type User struct {
	Email            *string    `json:"email"`
	Enabled          *bool      `json:"enabled,omitempty"`
	FirstLoginTime   *time.Time `json:"first_login_time"`
	Id               *string    `json:"id,omitempty"`
	Ip               *string    `json:"ip"`
	LastApiLoginTime *time.Time `json:"last_api_login_time"`
	LastIp           *string    `json:"last_ip"`
	LastLoginTime    *time.Time `json:"last_login_time"`
	Name             *string    `json:"name,omitempty"`
	Roles            *[]string  `json:"roles,omitempty"`
	Team             *string    `json:"team"`
	TeamId           *string    `json:"team_id"`
	Type             *string    `json:"type"`
	Userid           *int       `json:"userid,omitempty"`
	Username         *string    `json:"username,omitempty"`
}

// Cid defines model for cid.
type Cid = string

// Idlist defines model for idlist.
type Idlist = []string

// Strict defines model for strict.
type Strict = bool

// InvalidResponse defines model for InvalidResponse.
type InvalidResponse struct {
	union json.RawMessage
}

// NotFound defines model for NotFound.
type NotFound = map[string]interface{}

// Unauthorized defines model for Unauthorized.
type Unauthorized = map[string]interface{}

// GetV4AppApiContestListParams defines parameters for GetV4AppApiContestList.
type GetV4AppApiContestListParams struct {
	// Ids Filter the objects to get on this list of ID's
	Ids *Idlist `form:"ids[],omitempty" json:"ids[],omitempty"`

	// OnlyActive Whether to only return data pertaining to contests that are active
	OnlyActive *bool `form:"onlyActive,omitempty" json:"onlyActive,omitempty"`

	// Strict Whether to only include CCS compliant properties in the response
	Strict *Strict `form:"strict,omitempty" json:"strict,omitempty"`
}

// GetV4AppApiTeamListParams defines parameters for GetV4AppApiTeamList.
type GetV4AppApiTeamListParams struct {
	// Ids Filter the objects to get on this list of ID's
	Ids *Idlist `form:"ids[],omitempty" json:"ids[],omitempty"`

	// Category Only show teams for the given category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Affiliation Only show teams for the given affiliation / organization
	Affiliation *string `form:"affiliation,omitempty" json:"affiliation,omitempty"`

	// Public Only show visible teams, even for users with more permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty"`

	// Strict Whether to only include CCS compliant properties in the response
	Strict *Strict `form:"strict,omitempty" json:"strict,omitempty"`
}

// GetV4AppApiUserListParams defines parameters for GetV4AppApiUserList.
type GetV4AppApiUserListParams struct {
	// Ids Filter the objects to get on this list of ID's
	Ids *Idlist `form:"ids[],omitempty" json:"ids[],omitempty"`

	// TeamId Only show users for the given team
	TeamId *string `form:"team_id,omitempty" json:"team_id,omitempty"`
}

// PatchV4AppApiUserUpdateJSONRequestBody defines body for PatchV4AppApiUserUpdate for application/json ContentType.
type PatchV4AppApiUserUpdateJSONRequestBody = UpdateUser

// AsInvalidResponse0 returns the union data inside the InvalidResponse as a InvalidResponse0
func (t InvalidResponse) AsInvalidResponse0() (InvalidResponse0, error) {
	var body InvalidResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidResponse0 overwrites any union data inside the InvalidResponse as the provided InvalidResponse0
func (t *InvalidResponse) FromInvalidResponse0(v InvalidResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidResponse0 performs a merge with any union data inside the InvalidResponse, using the provided InvalidResponse0
func (t *InvalidResponse) MergeInvalidResponse0(v InvalidResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidResponse1 returns the union data inside the InvalidResponse as a InvalidResponse1
func (t InvalidResponse) AsInvalidResponse1() (InvalidResponse1, error) {
	var body InvalidResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidResponse1 overwrites any union data inside the InvalidResponse as the provided InvalidResponse1
func (t *InvalidResponse) FromInvalidResponse1(v InvalidResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidResponse1 performs a merge with any union data inside the InvalidResponse, using the provided InvalidResponse1
func (t *InvalidResponse) MergeInvalidResponse1(v InvalidResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InvalidResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InvalidResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV4AppApiContestList request
	GetV4AppApiContestList(ctx context.Context, params *GetV4AppApiContestListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV4AppApiTeamList request
	GetV4AppApiTeamList(ctx context.Context, cid Cid, params *GetV4AppApiTeamListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV4AppApiUserList request
	GetV4AppApiUserList(ctx context.Context, params *GetV4AppApiUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV4AppApiUserUpdateWithBody request with any body
	PatchV4AppApiUserUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV4AppApiUserUpdate(ctx context.Context, id string, body PatchV4AppApiUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV4AppApiContestList(ctx context.Context, params *GetV4AppApiContestListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV4AppApiContestListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV4AppApiTeamList(ctx context.Context, cid Cid, params *GetV4AppApiTeamListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV4AppApiTeamListRequest(c.Server, cid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV4AppApiUserList(ctx context.Context, params *GetV4AppApiUserListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV4AppApiUserListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV4AppApiUserUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV4AppApiUserUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV4AppApiUserUpdate(ctx context.Context, id string, body PatchV4AppApiUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV4AppApiUserUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV4AppApiContestListRequest generates requests for GetV4AppApiContestList
func NewGetV4AppApiContestListRequest(server string, params *GetV4AppApiContestListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids[]", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyActive", runtime.ParamLocationQuery, *params.OnlyActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Strict != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strict", runtime.ParamLocationQuery, *params.Strict); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV4AppApiTeamListRequest generates requests for GetV4AppApiTeamList
func NewGetV4AppApiTeamListRequest(server string, cid Cid, params *GetV4AppApiTeamListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, cid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/contests/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids[]", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Affiliation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "affiliation", runtime.ParamLocationQuery, *params.Affiliation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Public != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "public", runtime.ParamLocationQuery, *params.Public); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Strict != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strict", runtime.ParamLocationQuery, *params.Strict); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV4AppApiUserListRequest generates requests for GetV4AppApiUserList
func NewGetV4AppApiUserListRequest(server string, params *GetV4AppApiUserListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids[]", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV4AppApiUserUpdateRequest calls the generic PatchV4AppApiUserUpdate builder with application/json body
func NewPatchV4AppApiUserUpdateRequest(server string, id string, body PatchV4AppApiUserUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV4AppApiUserUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV4AppApiUserUpdateRequestWithBody generates requests for PatchV4AppApiUserUpdate with any type of body
func NewPatchV4AppApiUserUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV4AppApiContestListWithResponse request
	GetV4AppApiContestListWithResponse(ctx context.Context, params *GetV4AppApiContestListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiContestListResponse, error)

	// GetV4AppApiTeamListWithResponse request
	GetV4AppApiTeamListWithResponse(ctx context.Context, cid Cid, params *GetV4AppApiTeamListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiTeamListResponse, error)

	// GetV4AppApiUserListWithResponse request
	GetV4AppApiUserListWithResponse(ctx context.Context, params *GetV4AppApiUserListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiUserListResponse, error)

	// PatchV4AppApiUserUpdateWithBodyWithResponse request with any body
	PatchV4AppApiUserUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV4AppApiUserUpdateResponse, error)

	PatchV4AppApiUserUpdateWithResponse(ctx context.Context, id string, body PatchV4AppApiUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV4AppApiUserUpdateResponse, error)
}

type GetV4AppApiContestListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contest
	JSON400      *InvalidResponse
	JSON403      *Unauthorized
	JSON404      *NotFound
}
type GetV4AppApiContestList4000 = map[string]interface{}
type GetV4AppApiContestList4001 = string

// Status returns HTTPResponse.Status
func (r GetV4AppApiContestListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV4AppApiContestListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV4AppApiTeamListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
	JSON400      *InvalidResponse
	JSON403      *Unauthorized
	JSON404      *NotFound
}
type GetV4AppApiTeamList4000 = map[string]interface{}
type GetV4AppApiTeamList4001 = string

// Status returns HTTPResponse.Status
func (r GetV4AppApiTeamListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV4AppApiTeamListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV4AppApiUserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON400      *InvalidResponse
	JSON403      *Unauthorized
	JSON404      *NotFound
}
type GetV4AppApiUserList4000 = map[string]interface{}
type GetV4AppApiUserList4001 = string

// Status returns HTTPResponse.Status
func (r GetV4AppApiUserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV4AppApiUserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV4AppApiUserUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON400      *InvalidResponse
	JSON403      *Unauthorized
	JSON404      *NotFound
}
type PatchV4AppApiUserUpdate4000 = map[string]interface{}
type PatchV4AppApiUserUpdate4001 = string

// Status returns HTTPResponse.Status
func (r PatchV4AppApiUserUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV4AppApiUserUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV4AppApiContestListWithResponse request returning *GetV4AppApiContestListResponse
func (c *ClientWithResponses) GetV4AppApiContestListWithResponse(ctx context.Context, params *GetV4AppApiContestListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiContestListResponse, error) {
	rsp, err := c.GetV4AppApiContestList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV4AppApiContestListResponse(rsp)
}

// GetV4AppApiTeamListWithResponse request returning *GetV4AppApiTeamListResponse
func (c *ClientWithResponses) GetV4AppApiTeamListWithResponse(ctx context.Context, cid Cid, params *GetV4AppApiTeamListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiTeamListResponse, error) {
	rsp, err := c.GetV4AppApiTeamList(ctx, cid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV4AppApiTeamListResponse(rsp)
}

// GetV4AppApiUserListWithResponse request returning *GetV4AppApiUserListResponse
func (c *ClientWithResponses) GetV4AppApiUserListWithResponse(ctx context.Context, params *GetV4AppApiUserListParams, reqEditors ...RequestEditorFn) (*GetV4AppApiUserListResponse, error) {
	rsp, err := c.GetV4AppApiUserList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV4AppApiUserListResponse(rsp)
}

// PatchV4AppApiUserUpdateWithBodyWithResponse request with arbitrary body returning *PatchV4AppApiUserUpdateResponse
func (c *ClientWithResponses) PatchV4AppApiUserUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV4AppApiUserUpdateResponse, error) {
	rsp, err := c.PatchV4AppApiUserUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV4AppApiUserUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchV4AppApiUserUpdateWithResponse(ctx context.Context, id string, body PatchV4AppApiUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV4AppApiUserUpdateResponse, error) {
	rsp, err := c.PatchV4AppApiUserUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV4AppApiUserUpdateResponse(rsp)
}

// ParseGetV4AppApiContestListResponse parses an HTTP response from a GetV4AppApiContestListWithResponse call
func ParseGetV4AppApiContestListResponse(rsp *http.Response) (*GetV4AppApiContestListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV4AppApiContestListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetV4AppApiTeamListResponse parses an HTTP response from a GetV4AppApiTeamListWithResponse call
func ParseGetV4AppApiTeamListResponse(rsp *http.Response) (*GetV4AppApiTeamListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV4AppApiTeamListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetV4AppApiUserListResponse parses an HTTP response from a GetV4AppApiUserListWithResponse call
func ParseGetV4AppApiUserListResponse(rsp *http.Response) (*GetV4AppApiUserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV4AppApiUserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePatchV4AppApiUserUpdateResponse parses an HTTP response from a PatchV4AppApiUserUpdateWithResponse call
func ParsePatchV4AppApiUserUpdateResponse(rsp *http.Response) (*PatchV4AppApiUserUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV4AppApiUserUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}
