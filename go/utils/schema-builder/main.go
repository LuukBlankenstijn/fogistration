package main

import (
	"bufio"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

func main() {
	dbPath := "internal/shared/database/"
	migrationsDir := dbPath + "migrations/"
	outputFile := dbPath + "schema.sql"

	schema, err := generateSchema(migrationsDir)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}

	schema = "-- Generated by cmd/schema-builder/main.go DO NOT EDIT MANUALLY\n" + schema

	err = os.WriteFile(outputFile, []byte(schema), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Schema generated: %s\n", outputFile)
}

func generateSchema(migrationsDir string) (string, error) {
	var migrations []string

	err := filepath.WalkDir(migrationsDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if !d.IsDir() && strings.HasSuffix(path, ".sql") {
			migrations = append(migrations, path)
		}
		return nil
	})
	if err != nil {
		return "", err
	}

	sort.Strings(migrations)

	var schema strings.Builder
	for _, migration := range migrations {
		upSQL, err := extractUpMigration(migration)
		if err != nil {
			return "", fmt.Errorf("error processing %s: %v", migration, err)
		}
		if upSQL != "" {
			schema.WriteString(fmt.Sprintf("-- Migration: %s\n", filepath.Base(migration)))
			schema.WriteString(upSQL)
			schema.WriteString("\n\n")
		}
	}

	return schema.String(), nil
}

func extractUpMigration(filename string) (string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return "", err
	}
	defer file.Close()

	var upSQL strings.Builder
	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		line := scanner.Text()
		if strings.Contains(line, "---- create above / drop below ----") {
			break
		}
		upSQL.WriteString(line + "\n")
	}

	if err := scanner.Err(); err != nil {
		return "", err
	}

	return strings.TrimSpace(upSQL.String()), nil
}
