name: Build & Publish tern-migrate

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get tags
        id: tags
        run: |
          git fetch --tags --force
          echo "current=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          prev="$(git tag --sort=-creatordate | grep -v "^${GITHUB_REF_NAME}$" | head -n1 || true)"
          echo "previous=${prev}" >> "$GITHUB_OUTPUT"
          echo "first_release=$([ -z "$prev" ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Paths filter (changed since previous tag)
        id: filter
        if: steps.tags.outputs.first_release == 'false'
        uses: dorny/paths-filter@v3
        with:
          base: refs/tags/${{ steps.tags.outputs.previous }}
          ref:  refs/tags/${{ steps.tags.outputs.current }}
          filters: |
            migrations:
              - 'go/internal/shared/database/migrations/**'

      - name: Downcase repo for GHCR tags
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push tern-migrate
        if: steps.tags.outputs.first_release == 'true' || steps.filter.outputs.migrations == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.tern    # name this Dockerfile however you like
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_LC }}-tern-migrate:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REPO_LC }}-tern-migrate:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
